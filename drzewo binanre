from typing import Any, Callable

class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value, left_child=None, right_child=None):
        self.value = value
        self.left_child = left_child
        self.right_child = right_child

    def is_leaf(self):
        if not self.left_child or not self.right_child:
            return True
        return False

    def add_left_child(self, value: Any):
        if self.left_child is None:
            self.left_child = BinaryNode(value)
        else:
            self.left_child.add_left_child(value)

    def add_right_child(self, value: Any):
        if self.right_child is None:
            self.right_child = BinaryNode(value)
        else:
            self.right_child.add_right_child(value)

    def traverse_in_order(self, visit: Callable[[Any], None]) -> None:
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        visit(self)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]) -> None:
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)
        visit(self)

    def traverse_pre_order(self, visit: Callable[[Any], None]) -> None:
        visit(self)
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)

    def add_edges(self, dot: graphviz.Digraph):
        if self.left_child is not None:
            dot.edge(str(self), str(self.left_child))
        if self.right_child is not None:
            dot.edge(str(self), str(self.right_child))


class BinaryTree:
    root: BinaryNode

    def __init__(self, root_val):
        self.root = BinaryNode(root_val)

    def traverse_in_order(self, visit: Callable[[Any], None]) -> None:
        self.root.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]) -> None:
        self.root.traverse_post_order(visit)

    def traverse_pre_order(self, visit: Callable[[Any], None]) -> None:
        self.root.traverse_pre_order(visit)

    def show(self):
        dot = graphviz.Digraph('Graph')
        self.traverse_in_order(lambda x: dot.node(str(x), str(x)))
        self.traverse_in_order(lambda x: x.add_edges(dot))
        print(dot.source)

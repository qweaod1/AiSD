from typing import Any, Callable

class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value, left_child=None, right_child=None):
        self.value = value
        self.left_child = left_child
        self.right_child = right_child

    def is_leaf(self):
        if not self.left_child or not self.right_child:
            return True
        return False

    def add_left_child(self, value: Any):
        if self.left_child is None:
            self.left_child = BinaryNode(value)
        else:
            self.left_child.add_left_child(value)

    def add_right_child(self, value: Any):
        if self.right_child is None:
            self.right_child = BinaryNode(value)
        else:
            self.right_child.add_right_child(value)

    def __str__(self):
        return f'{self.value} left child: {self.left_child} right child: {self.right_child}'

    def traverse_in_order(self, visit: Callable[[Any], None]):
